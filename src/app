#!/bin/sh
# Copyright 2023 Northern.tech AS
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

set -e

STATE="$1"
FILES="$2"

temp_dir="$FILES"/tmp

cleanup() {
    set +e
    test -f "$PERSISTENT_STORE"/.rw_test && rm -f "$PERSISTENT_STORE"/.rw_test
}

trap cleanup 1 2 3 6 15

CONFIG_FILE="/etc/mender/mender-app.conf"
PERSISTENT_STORE="/data/mender-app"
APP_MODULE_DIR="/usr/share/mender/app-modules/v1"

version=""
orchestrator=""
platform=""
app_sub_module=""
artifact_name=""
application_name=""
options=""

if test -f "$CONFIG_FILE"; then
    . "$CONFIG_FILE"
fi

if test -d "$PERSISTENT_STORE"; then
    if touch "$PERSISTENT_STORE"/.rw_test; then
        rm -f "$PERSISTENT_STORE"/.rw_test
    else
        echo "ERROR: cant write to persistent_store in $PERSISTENT_STORE"
        exit 1
    fi
fi

CONFIG_HAS_XDELTA3_CMD="xdelta3"
CONFIG_HAS_TAR_CMD="tar"
delta_cmd="${CONFIG_HAS_XDELTA3_CMD} -d -s"
tar_decompress_cmd="${CONFIG_HAS_TAR_CMD} -xzvf"

assert_requirements() {
    local cmd
    local rc=0
    set +e

    if ! $CONFIG_HAS_TAR_CMD --version < /dev/null > /dev/null 2>&1; then
        echo "error: cannot find required command '${CONFIG_HAS_TAR_CMD}' in PATH." 1>&2
        rc=127
    fi
    if ! $CONFIG_HAS_XDELTA3_CMD < /dev/null > /dev/null 2>&1; then
        echo "warning: cannot find command '${CONFIG_HAS_XDELTA3_CMD}' in PATH." 1>&2
    fi
    $app_sub_module REQS
    if test $? -ne 0; then
        rc=1
    fi
    set -e
    return $rc
}

parse_metadata() {
    application_name=$(jq -r .application_name < "$1")
    platform=$(jq -r .platform < "$1")
    export MENDER_APP_UPDATE_MODULE_PLATFORM="$platform"
    orchestrator=$(jq -r .orchestrator < "$1")
    version=$(jq -r .version < "$1")
    app_sub_module="${APP_MODULE_DIR}/${orchestrator}"
    if test ! -f "${app_sub_module}"; then
        echo "ERROR: ${app_sub_module} not found. exiting."
        return 1
    fi
    if test ! -x "${app_sub_module}"; then
        echo "ERROR: ${app_sub_module} not executable. exiting."
        return 1
    fi
    if test ! -r "${app_sub_module}"; then
        echo "ERROR: ${app_sub_module} not readable. exiting."
        return 1
    fi
    artifact_name=$(jq -r .artifact_provides.artifact_name < "$2")

    if test "${application_name}" = ""; then
        echo "ERROR: application_name is required. exiting."
        return 1
    fi

    if test "${platform}" = ""; then
        echo "ERROR: platform is required. exiting."
        return 1
    fi

    if test "${orchestrator}" = ""; then
        echo "ERROR: orchestrator is required. exiting."
        return 1
    fi

    if test "${version}" = ""; then
        echo "ERROR: version is required. exiting."
        return 1
    fi

    if test "${artifact_name}" = ""; then
        echo "ERROR: artifact_name is required. exiting."
        return 1
    fi
    $(jq -r 'select(.env != null) | .env | keys[] as $k | "export \($k)=\(.[$k])"' < "$1" 2> /dev/null)
}

clean_up() {
    local app_dir="$1"

    if test -f "$app_dir"/images/urls; then
        xargs -I{} $app_sub_module DELETE {} < "$app_dir"/images/urls
    fi
}

handle_artifact() {
    local image_dir
    local image
    local url_new
    local url_current
    local sha_new
    local sha_current
    local image_current
    local image_new
    local deep_delta
    local rollback_id="last"
    local rc=0
    local skip_images="false"

    if test ! -d "$temp_dir"; then
        echo "ERROR: temp_dir does not exist"
        return 1
    fi

    if test -f "$1"/images.tar.gz; then
        echo "decompressing images"
        $tar_decompress_cmd "$1"/images.tar.gz -C "$temp_dir"
    else
        skip_images="true"
    fi

    echo "decompressing manifests"
    $tar_decompress_cmd "$1"/manifests.tar.gz -C "$temp_dir"

    if test "${skip_images}" = "false"; then
        echo "unpacking images"
        for image_dir in "${temp_dir}/images/"*; do
            echo "unpacking $image_dir"
            url_new=$(cat "${image_dir}/url-new.txt")
            url_current=$(cat "${image_dir}/url-current.txt")
            sha_new=$(cat "${image_dir}/sums-new.txt")
            sha_current=$(cat "${image_dir}/sums-current.txt")
            if test "$url_new" = ""; then
                echo "ERROR: payload ${image_dir}/url-new.txt cannot be empty"
                return 1
            fi
            if test "$sha_new" = ""; then
                echo "ERROR: sha_new cannot be empty"
                return 1
            fi

            if test "$url_new" != "$url_current"; then
                if test "$url_current" = ""; then
                    echo "ERROR: url_current cannot be empty"
                    return 1
                fi
                if test "$sha_current" = ""; then
                    echo "ERROR: sha_ccurrent cannot be empty"
                    return 1
                fi
                if test ! -f "${image_dir}/deep_delta"; then
                    # deep-delta means that the binary delta was generated at the layers level,
                    # and the orchestrators submodule will deal with decoding during the LOAD below
                    # ref. to LOAD implementations
                    image_current="${temp_dir}/current.${sha_current}.img"
                    image_new="${temp_dir}/new.${sha_new}.img"
                    $app_sub_module SAVE "${application_name}" "$url_current" "$image_current"
                    $delta_cmd "$image_current" "${image_dir}/image.img" "${image_new}"
                    mv -v "${image_new}" "${image_dir}/image.img"
                fi
            fi
        done
    fi
    if test -d "${PERSISTENT_STORE}/${application_name}"; then
        echo "copying existing composition to -previous"
        rm -Rf "${PERSISTENT_STORE}/${application_name}-previous"
        mv -v "${PERSISTENT_STORE}/${application_name}" "${PERSISTENT_STORE}/${application_name}-previous"
    else
        echo "no previous composition found"
    fi
    mkdir -pv "${PERSISTENT_STORE}/${application_name}"/images
    rm -vf "${PERSISTENT_STORE}/${application_name}"/images/*
    if test "${skip_images}" = "false"; then
        for image_dir in "${temp_dir}/images/"*; do
            echo "scanning ${image_dir}"
            url_current=$(cat "${image_dir}/url-current.txt")
            url_new=$(cat "${image_dir}/url-new.txt")
            sha_new=$(cat "${image_dir}/sums-new.txt")
            deep_delta=""
            if test -f "${image_dir}/deep_delta"; then
                deep_delta=deep_delta
            fi
            MODULE_TMPDIR="${temp_dir}" OPTIONS="${deep_delta}" $app_sub_module LOAD "${application_name}" "${url_new}" "${image_dir}/image.img" "${url_current}"
            # and the sub module deals with proper image loading
            # we save the image urls and shasums in order to be able to clean up
            echo "${url_new}" >> "${PERSISTENT_STORE}/${application_name}"/images/urls
            echo "${sha_new}" >> "${PERSISTENT_STORE}/${application_name}"/images/shas
        done
    else
        jq -r '.images_urls[]?' < "$1" | while IFS= read -r image_url; do
            echo "$image_url" >> "${PERSISTENT_STORE}/${application_name}/images/urls"
        done
    fi
    # we should check if the app is healthy and alive, then decide what to do
    # at the moment we assume it is alive and ok
    if test -d "${PERSISTENT_STORE}/${application_name}-previous/manifests"; then
        echo "stopping ${PERSISTENT_STORE}/${application_name}-previous/manifests"
        $app_sub_module STOP "${application_name}" "${PERSISTENT_STORE}/${application_name}-previous/manifests"
    else
        echo "-previous composition not present; nothing to stop."
    fi
    mv -v "$temp_dir/manifests" "${PERSISTENT_STORE}/${application_name}/"
    echo "rolling out ${PERSISTENT_STORE}/${application_name}/manifests"
    set +e
    $app_sub_module ROLLOUT "${application_name}" "${PERSISTENT_STORE}/${application_name}/manifests" 2>&1
    if test $? -eq 0; then
        echo "successful rollout"
        if test -d "${PERSISTENT_STORE}/${application_name}-${rollback_id}"; then
            echo "cleaning up -${rollback_id}"
            clean_up "${PERSISTENT_STORE}/${application_name}-${rollback_id}" # clean up call automatically removes the images in by reference taken from clen-up subdirectory, it relies on the fact that we save them there
            echo "cleaning up -previous"
            clean_up "${PERSISTENT_STORE}/${application_name}-previous" # clean up the composition that was running just now
        else
            echo "successful rollout: nothing to clean"
        fi
        rm -Rfv "${PERSISTENT_STORE}/${application_name}-previous"
        # save_rollback "${PERSISTENT_STORE}/${application_name}-${rollback_id}" # saves the current images ids and manifests as new rollback state. this can be just cp -a "${PERSISTENT_STORE}/${application_name} "${PERSISTENT_STORE}/${application_name}-${rollback_id}"
        echo "saving data for rollback"
        rm -Rfv "${PERSISTENT_STORE}/${application_name}-${rollback_id}"
        cp -va "${PERSISTENT_STORE}/${application_name}" "${PERSISTENT_STORE}/${application_name}-${rollback_id}"
        echo "successfully saved rollback data"
    else
        echo "unsuccessful rollout"
        rc=8
        clean_up "${PERSISTENT_STORE}/${application_name}"
        $app_sub_module ROLLBACK "${application_name}" "${PERSISTENT_STORE}/${application_name}-${rollback_id}" "${PERSISTENT_STORE}/${application_name}/manifests"
        if test $? -eq 0; then
            echo "successful rollback"
            rc=80
        else
            echo "unsuccessful rollback trying to rollout the composition we saw when we started"
            $app_sub_module ROLLOUT "${application_name}" "${PERSISTENT_STORE}/${application_name}-previous/manifests"
            if test $? -eq 0; then
                echo "successfully rolled out ${PERSISTENT_STORE}/${application_name}-previous"
                rc=82
            else
                echo "rollout of ${PERSISTENT_STORE}/${application_name}-previous was unsuccessful; deployment failed; rollout attempts failed."
                rc=84
            fi
        fi
    fi
    set -e
    return $rc
}

case "$STATE" in

    NeedsArtifactReboot)
        echo "No"
        ;;

    SupportsRollback)
        echo "No" # switch to Yes on MEN-6077
        ;;

    ArtifactInstall)
        parse_metadata "$FILES"/header/meta-data "$FILES"/header/header-info
        assert_requirements
        rc=$?
        if test $rc -ne 0; then
            exit $rc
        fi
        handle_artifact "$FILES"/files
        ;;

    ArtifactRollback)
        true
        ;;

esac
