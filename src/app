#!/bin/bash

set -e

config_file="/etc/mender/mender-app.conf"
version=""
orchestrator=""
platform=""
manifests_dir=""
app_module_dir="/usr/share/mender/app-modules/v1"
app_sub_module=""
artifact_name=""
persistent_store="/data/mender-app"
application_name=""

if test -f "$config_file"; then
    . "$config_file"
fi

# -W16777216 -B16777216
delta_cmd="xdelta3 -d -s"
tar_decompress_cmd="tar -xzvf"

function get_image() {
    if [[ "$USE_DOCKER" != "" ]]; then
        docker_get_image "$@"
    else
        ctr_get_image "$@"
    fi
}

function parse_metadata() {
    application_name=$(cat "$1" | jq -r .application_name)
    platform=$(cat "$1" | jq -r .platform)
    orchestrator=$(cat "$1" | jq -r .orchestrator)
    version=$(cat "$1" | jq -r .version)
    app_sub_module="${app_module_dir}/${orchestrator}"
    if test ! -f "${app_sub_module}"; then
        echo "ERROR: ${app_sub_module} not found. exiting."
        return 1
    fi
    artifact_name=$(cat "$2" | jq -r .artifact_provides.artifact_name)
}

function decompress_artifact() {
    local temp_dir=$(mktemp -d)
    local image_dir
    local image
    local url_new
    local url_current
    local sha_new
    local sha_current
    local current_image
    local new_image
    local rollback_id=$(basename "$temp_dir") # just for now

    if test "$temp_dir" = ""; then
        return 1
    fi

    $tar_decompress_cmd "$1"/images.tar.gz -C "$temp_dir"
    $tar_decompress_cmd "$1"/manifests.tar.gz -C "$temp_dir"

    for image_dir in "${temp_dir}/images/"*; do
        url_new=$(cat "${image_dir}/url-new.txt")
        url_current=$(cat "${image_dir}/url-current.txt")
        sha_new=$(cat "${image_dir}/sums-new.txt")
        sha_current=$(cat "${image_dir}/sums-current.txt")
        if test "$url_new" != "$url_current"; then
            current_image="${temp_dir}/current.${sha_current}.img"
            new_image="${temp_dir}/new.${sha_new}.img"
            $app_sub_module export "$url_current" "$current_image"
            $delta_cmd "$current_image" "${image_dir}/image.img" "${new_image}"
            mv -v "${new_image}" "${image_dir}/image.img"
        fi
    done
    for image_dir in "${temp_dir}/images/"*; do
        url_new=$(cat "${image_dir}/url-new.txt")
        sha_new=$(cat "${image_dir}/sums-new.txt")
        $app_sub_module import "${url_new}" "${image_dir}/image.img"
    done
    if test -d "${persistent_store}/${application_name}/"; then
        mv -v "${persistent_store}/${application_name}/" "${persistent_store}/${application_name}-${rollback_id}"
        $app_sub_module stop "${persistent_store}/${application_name}-${rollback_id}/manifests"
    fi
    mkdir -p "${persistent_store}/${application_name}"
    mv -v "$temp_dir/manifests" "${persistent_store}/${application_name}/"
    $app_sub_module rollout "${persistent_store}/${application_name}/manifests"
    # now if $app_sub_module healthy then rm -Rf "${persistent_store}/${artifact_name}-${rollback_id}"
    # and on rollback we just deploy "${persistent_store}/${artifact_name}-${rollback_id}"
    # earlier ln -s "${persistent_store}/${artifact_name}-${rollback_id}" "${persistent_store}/${artifact_name}-rollback"
    # and removing all else
}

STATE="$1"
FILES="$2"

case "$STATE" in

    NeedsArtifactReboot)
        echo "No"
        ;;

    SupportsRollback)
        echo "No" # switch to Yes on MEN-6077
        ;;

    ArtifactInstall)
        parse_metadata "$FILES"/header/meta-data "$FILES"/header/header-info
        decompress_artifact "$FILES"/files
        ;;

    ArtifactRollback) ;;

esac

exit 0
