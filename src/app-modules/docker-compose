#!/bin/sh
# Copyright 2023 Northern.tech AS
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

set -x

docker_compose_cmd=docker-compose
docker_cmd=docker
delta_cmd="xdelta3 -d -s"

unpack_image() {
    local input_file="$1"
    local image_dir="$2"

    if test -d "${image_dir}"; then
        rm -Rf "${image_dir}"
    fi
    mkdir -p "${image_dir}"
    tar xvf "$input_file" -C "${image_dir}"
}

# given a checksum and a directory find matching layer.tar
# be careful what you echo to stdout from this function:
# it prints the path to a layer
find_layer_by_sum() {
    local sum="$1"
    local dir="$2"
    local file_list

    if test "$sum" = ""; then
        return 1
    fi
    file_list=$(mktemp)
    find "$dir" -name layer.tar -exec sha256sum {} \; > "${file_list}"
    cat "$file_list" | sed -ne "/^${sum}/s/^${sum}[ ]*//p"
    rm -f "${file_list}"
}

# given current and new image directories and the binary delta of a layer
# apply and save the layer.tar in the new image dir
apply_layer_delta() {
    local current_image_dir="$1"
    local new_image_dir="$2"
    local vcdiff="$3"
    local current_sum_file
    local new_sum_file
    local current_sum
    local new_sum
    local output_layer
    local current_layer_tar
    local new_layer_tar

    current_sum_file=$(echo "$vcdiff" | sed -e 's/.vcdiff$/.current.sha256sum/')
    new_sum_file=$(echo "$vcdiff" | sed -e 's/.vcdiff$/.new.sha256sum/')
    output_layer=$(echo "$vcdiff" | sed -e 's/.vcdiff$//')
    current_sum=$(cat "${current_sum_file}")
    new_sum=$(cat "${new_sum_file}")
    # we need to find the corresponding layer in current_image_dir and encode the
    # delta in new_image_dir, in the directory we must also find by layer.tar sum
    current_layer=$(find_layer_by_sum "${current_sum}" "${current_image_dir}")
    if test "$current_layer" = ""; then
        echo "ERROR: cant find current layer by checksum: ${current_sum}"
        return 1
    fi
    $delta_cmd "$current_layer" "${vcdiff}" "${output_layer}"
    # we could here verify the sums here, a bit redundant.
    rm -f "${current_sum_file}" "${new_sum_file}" "${vcdiff}"
}

# |-- ecaa1158057a2e325f72c5e43c9847fbef370da5a65d6534b1708c99feb7c0e7
#|   |-- VERSION
#|   |-- json
#|   |-- layer.tar.current.sha256sum
#|   |-- layer.tar.new.sha256sum
#|   `-- layer.tar.vcdiff
resolve_deep_delta() {
    local application_name="$1"
    local input_file="$2"
    local current_url="$3"
    local new_image_dir="${MODULE_TMPDIR:-${TMPDIR}}"
    local current_image_dir="${MODULE_TMPDIR:-${TMPDIR}}"
    local current_image_file
    local vcdiff
    local image_dir="${MODULE_TMPDIR:-${TMPDIR}}"

    if test ! -d "$new_image_dir"; then
        echo "ERROR: neither MODULE_TMPDIR or TMPDIR is set"
        return 1
    fi
    if test ! -d "$current_image_dir"; then
        echo "ERROR: neither MODULE_TMPDIR or TMPDIR is set"
        return 1
    fi
    if test ! -d "$image_dir"; then
        echo "ERROR: neither MODULE_TMPDIR or TMPDIR is set"
        return 1
    fi
    current_image_file="${image_dir}"/$(echo "${current_url}" | sha256sum | cut -f1 -d' ')
    if test -f "$current_image_file"; then
        rm -f "${current_image_file}"
    fi
    app_save "${application_name}" "$current_url" "${current_image_file}"
    new_image_dir="${image_dir}/image-$(sha256sum "${input_file}" | cut -f1 -d' ')"
    current_image_dir="${image_dir}/image-$(sha256sum "${current_image_file}" | cut -f1 -d' ')"
    unpack_image "${input_file}" "${new_image_dir}"
    unpack_image "${current_image_file}" "${current_image_dir}"
    for vcdiff in "${new_image_dir}"/*/layer.tar.vcdiff; do # TODO: change into something else;
        if test ! -f "$vcdiff"; then
            break
        fi
        apply_layer_delta "${current_image_dir}" "${new_image_dir}" "${vcdiff}"
    done
    rm -f "${input_file}"
    tar cf "${input_file}" -C "${new_image_dir}" .
}

app_load() {
    local application_name="$1"
    local url="$2"
    local input_file="$3"
    local url_current="$4"

    if test "$OPTIONS" = "deep_delta"; then
        if test "$MODULE_TMPDIR" = ""; then
            echo "ERROR: ${MODULE_TMPDIR} cant be empty"
            return 1
        fi
        if ! test -d "$MODULE_TMPDIR"; then
            echo "ERROR: ${MODULE_TMPDIR} does not exist as a directory"
            return 1
        fi
        resolve_deep_delta "${application_name}" "${input_file}" "${url_current}"
    fi
    $docker_cmd image load < "$input_file"
}

app_save() {
    local application_name="$1"
    local url="$2"
    local output_file="$3"

    $docker_cmd image save "$url" -o "$output_file"
}

app_rollout() {
    local application_name="$1"
    local manifests_dir="$2"

    $docker_compose_cmd --project-directory "$manifests_dir" up -d > "$manifests_dir"/compose.log 2>&1 &
}

app_stop() {
    local application_name="$1"
    local manifests_dir="$2"

    $docker_compose_cmd --project-directory "$manifests_dir" down >> "$manifests_dir"/compose.log 2>&1
}

case "$1" in
    SAVE)
        shift
        app_save "$@"
        ;;
    LOAD)
        shift
        app_load "$@"
        ;;
    ROLLOUT)
        shift
        app_rollout "$@"
        ;;
    STOP)
        shift
        app_stop "$@"
        ;;
    EXPORT_MANIFEST)
        true
        ;;
    LS_COMPONENTS)
        true
        ;;
    DELETE)
        true
        ;;
    ROLLBACK)
        true
        ;;
    PURGE)
        true
        ;;
    START)
        true
        ;;
    ALIVE)
        true
        ;;
    HEALTHY)
        true
        ;;
    *)
        echo "ERROR: unknown API call: $@"
        exit 1
        ;;
esac
